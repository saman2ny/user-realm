@use '~@angular/material' as mat;
// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@import './partials/palettes';
@import './typography';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core($typography-config);

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$saas-portal-web-primary: mat.define-palette($palette-primary);
$saas-portal-web-accent: mat.define-palette($palette-accent);

// The warn palette is optional (defaults to red).
$saas-portal-web-warn: mat.define-palette(mat.$red-palette);

@function portal-mat-light-theme-foreground($color) {
  @return (
      base:              $color,
      divider:           $color,
      dividers:          $color,
      disabled:          rgba($color, 0.38),
      disabled-button:   rgba($color, 0.38),
      disabled-text:     rgba($color, 0.38),
      hint-text:         rgba($color, 0.38),
      secondary-text:    rgba($color, 0.54),
      icon:              rgba($color, 0.54),
      icons:             rgba($color, 0.54),
      text:              $color,
      slider-off:        rgba($color, 0.26),
      slider-off-active: rgba($color, 0.38),
      slider-min:        rgba($color, 0.38)
  );
};
$portal-foreground: portal-mat-light-theme-foreground($text-color);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$saas-portal-web-light-theme: mat.define-light-theme((
  color: (
    primary: $saas-portal-web-primary,
    accent: $saas-portal-web-accent,
    warn: $saas-portal-web-warn
  )
));

$color-theme: map-get($saas-portal-web-light-theme, 'color');
$new-color-theme: map-merge($color-theme, (foreground: $portal-foreground));
$saas-portal-web-theme: map-merge($saas-portal-web-light-theme, (color: $new-color-theme));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($saas-portal-web-theme);
